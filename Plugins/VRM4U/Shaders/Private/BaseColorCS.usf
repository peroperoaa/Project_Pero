#include "/Engine/Public/Platform.ush"
#include "/Engine/Generated/UniformBuffers/View.ush"
//#include "SceneTexturesCommon.ush"
DECLARE_UNIFORM_BUFFER(View);

RWTexture2D<float4> OutputTexture : register(u0); // Render Targetへの書き込み用

Texture2D NormalTexture;
Texture2D<float> SceneDepthTexture;

Texture2D CustomDepthTexture;
Texture2D<uint2> CustomStencilTexture;

//Texture2D SceneDepthTexture : register(t0);
//SamplerState DepthSampler : register(s0);

//SamplerState InputSampler;


float GetLinearDepth(float2 UV, uint2 pixelCoord)
{
    
    //float DeviceZ = SceneDepthTexture.SampleLevel(DepthSampler, UV, 0).r;
    float DeviceZ = SceneDepthTexture[pixelCoord];
    return 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);

/*    
    float Depth = SceneDepthTexture.SampleLevel(DepthSampler, UV, 0).r;

    float ZNear = View.ViewToClip[3][2] / View.ViewToClip[2][2];
    float ZFar = View.ViewToClip[3][2] / (View.ViewToClip[2][2] - 1.0);

    // 非リニア深度をリニア深度に変換
    float LinearDepth = ZFar * ZNear / (ZNear + Depth * (ZFar - ZNear));
    return LinearDepth;
*/
}

float ToLinearDepth(float DeviceZ)
{
    
    //float DeviceZ = SceneDepthTexture.SampleLevel(DepthSampler, UV, 0).r;
    //float DeviceZ = InputTexture[pixelCoord].x;
    return 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);
}


float3 ReconstructWorldPosition(float2 UV, uint2 pixelCoord)
{
    // 1. UV座標をクリップ空間に変換
    float2 ClipXY = UV * 2.0 - 1.0; // [0, 1] -> [-1, 1]
    // 深度値はリニア化済み（SceneDepthは通常リニア深度）
    //float ClipZ = Depth; // UnrealのSceneDepthはリニア深度（0=近, 1=遠）
    float ClipZ = GetLinearDepth(UV, pixelCoord);

    // 2. クリップ空間の座標を構築
    // w=1としてクリップ空間座標を作成（透視投影の場合）
    float4 ClipPos = float4(ClipXY, ClipZ, 1.0);

    // 3. クリップ空間 -> ビュー空間
    float4 ViewPos = mul(ClipPos, View.ClipToView); // 逆投影行列
    ViewPos /= ViewPos.w; // 透視除算

    // 4. ビュー空間 -> ワールド空間
    float4 WorldPos = mul(ViewPos, View.ViewToWorld); // 逆ビュー行列
    return WorldPos.xyz; // ワールド座標
}


[numthreads(8, 8, 1)]
void MainCS(uint3 DispatchThreadID : SV_DispatchThreadID)
{
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM6
    uint width, height;
    OutputTexture.GetDimensions(width, height);

    
    float2 ViewSize = View.ViewSizeAndInvSize.xy;
    
    uint2 pixelCoord = DispatchThreadID.xy;
    
    //float4 color = float4(float(pixelCoord.x) / width, float(pixelCoord.y) / height, 0.5, 1.0);
    float4 color = float4(float(pixelCoord.x) / ViewSize.x, float(pixelCoord.y) / ViewSize.y, 0.5, 1.0);
    //if (color.x < 0.5)  color.x = 1;
    //if (pixelCoord.x == pixelCoord.y) color = 0;
    //color.xyz = 0;
    //OutputTexture[pixelCoord] = color;

    //OutputTexture[pixelCoord] = InputTexture[pixelCoord].xxxw;// / 10.f;

    {
        float2 UV = ViewSize / float2(width, height);
        
        float Depth = SceneDepthTexture[pixelCoord]; //SceneDepthTexture.SampleLevel(DepthSampler, UV, 0);
        
        float LinearDepth = GetLinearDepth(UV, pixelCoord);

        float t = saturate(LinearDepth / 5000.f);
        
        float3 color = lerp(float3(0, 0, 1), float3(0, 1, 0), t); // 青→緑
        color = lerp(color, float3(1, 0, 0), t); // 緑→赤
        
        //OutputTexture[pixelCoord].xyz = color; //        frac(LinearDepth / 5000.f);
        //OutputTexture[pixelCoord] = float4(LinearDepth / 1000.0, 0.0, 0.0, 1.0);

    }
    //    CustomStencilTexture
    //OutputTexture[pixelCoord].xyz = color; //        frac(LinearDepth / 5000.f);

    if (CustomStencilTexture[pixelCoord].y >= 1) {
        if (SceneDepthTexture[pixelCoord] <= CustomDepthTexture[pixelCoord].r) {
            float3 PackedNormal = NormalTexture[pixelCoord].xyz;
            float3 WorldNormal = PackedNormal * 2.0 - 1.0; // [-1, 1]に変換
            //OutputTexture[pixelCoord].xyz = WorldNormal; //                1; //        frac(LinearDepth / 5000.f);
            
            float t = dot(WorldNormal, View.DirectionalLightDirection);
            t = saturate(t);

            if (t > 0.2) {
                float4 ClipLightDir = mul(float4(-View.DirectionalLightDirection, 0.0), View.RelativeWorldToClip);

                ClipLightDir.xyz = normalize(ClipLightDir.xyz);

                bool bEdge = false;
                for (int i = 0; i < 50; ++i) {
                    int2 target = int2(ClipLightDir.xy * float2(i,i)) + pixelCoord;
                    if (CustomStencilTexture[target].y == 0) {
                        bEdge = true;
                        break;
                    }
                }
                if (bEdge) {
                    //OutputTexture[pixelCoord].x = 10; //            t * 10;
                    //OutputTexture[pixelCoord].yz = 0; //            t * 10;
                    OutputTexture[pixelCoord].xyz = max(OutputTexture[pixelCoord].xyz, saturate(View.DirectionalLightColor.xyz) * 10.0);
                }
                
                
                //for (int i = 0; i < 100; ++i) {
                //    OutputTexture[pixelCoord + int2((ClipLightDir.xy * float2(i,i)))] = 10;
                //}
            }
        }
    }

    
#endif
}

